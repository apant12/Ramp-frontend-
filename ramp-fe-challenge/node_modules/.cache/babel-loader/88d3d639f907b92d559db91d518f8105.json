{"ast":null,"code":"var _jsxFileName = \"/Users/ayushpant/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState, useEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null); // Correctly type the ref to point to an HTMLDivElement\n\n  const inputRef = useRef(null); // Initialize the dropdown position state\n\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]); // Define a function to update the dropdown position based on the input element's current position\n\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      const rect = inputRef.current.getBoundingClientRect(); // Update the dropdown position state\n\n      setDropdownPosition({\n        top: rect.bottom + window.scrollY,\n        left: rect.left + window.scrollX\n      });\n    }\n  }, []);\n  useEffect(() => {\n    // Attach scroll and resize event listeners to update the dropdown position dynamically\n    const handleScrollOrResize = () => {\n      updateDropdownPosition();\n    };\n\n    window.addEventListener('scroll', handleScrollOrResize);\n    window.addEventListener('resize', handleScrollOrResize); // Initial position update\n\n    updateDropdownPosition();\n    return () => {\n      // Cleanup\n      window.removeEventListener('scroll', handleScrollOrResize);\n      window.removeEventListener('resize', handleScrollOrResize);\n    };\n  }, [updateDropdownPosition]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: selectedItem => {\n      onChange(selectedItem);\n      updateDropdownPosition(); // Also update position when the selection changes\n    },\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _ref2 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        ref: inputRef,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", { ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          ...toggleProps,\n          onClick: event => {\n            updateDropdownPosition();\n            toggleProps.onClick && toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", { ...getMenuProps(),\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          style: {\n            position: 'absolute',\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSelect, \"g+pgoDOmMX5ZIP1kCtl3MvGacCo=\");\n\n_c = InputSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","useEffect","useRef","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","inputRef","dropdownPosition","setDropdownPosition","top","left","selectedItem","updateDropdownPosition","current","rect","getBoundingClientRect","bottom","window","scrollY","scrollX","handleScrollOrResize","addEventListener","removeEventListener","item","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","event","onClick","position"],"sources":["/Users/ayushpant/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\";\nimport { useCallback, useState, useEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { DropdownPosition, InputSelectOnChange, InputSelectProps } from \"./types\";\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null);\n  // Correctly type the ref to point to an HTMLDivElement\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  // Initialize the dropdown position state\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({ top: 0, left: 0 });\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return;\n      }\n\n      consumerOnChange(selectedItem);\n      setSelectedValue(selectedItem);\n    },\n    [consumerOnChange]\n  );\n\n  // Define a function to update the dropdown position based on the input element's current position\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      const rect = inputRef.current.getBoundingClientRect();\n      // Update the dropdown position state\n      setDropdownPosition({\n        top: rect.bottom + window.scrollY,\n        left: rect.left + window.scrollX,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    // Attach scroll and resize event listeners to update the dropdown position dynamically\n    const handleScrollOrResize = () => {\n      updateDropdownPosition();\n    };\n\n    window.addEventListener('scroll', handleScrollOrResize);\n    window.addEventListener('resize', handleScrollOrResize);\n\n    // Initial position update\n    updateDropdownPosition();\n\n    return () => {\n      // Cleanup\n      window.removeEventListener('scroll', handleScrollOrResize);\n      window.removeEventListener('resize', handleScrollOrResize);\n    };\n  }, [updateDropdownPosition]);\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={(selectedItem) => {\n        onChange(selectedItem);\n        updateDropdownPosition(); // Also update position when the selection changes\n      }}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps();\n\n        return (\n          <div className=\"RampInputSelect--root\" ref={inputRef}>\n            <label {...getLabelProps()}>{label}</label>\n            <div\n              className=\"RampInputSelect--input\"\n              {...toggleProps}\n              onClick={(event) => {\n                updateDropdownPosition();\n                toggleProps.onClick && toggleProps.onClick(event);\n              }}\n            >\n              {inputValue}\n            </div>\n            <div\n              {...getMenuProps()}\n              className={classNames(\"RampInputSelect--dropdown-container\", {\"RampInputSelect--dropdown-container-opened\": isOpen})}\n              style={{ position: 'absolute', top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {/* Render dropdown items */}\n            </div>\n          </div>\n        );\n      }}\n    </Downshift>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}