{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState, useEffect } from \"react\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const updateDropdownPosition = useCallback(target => {\n    const newPosition = getDropdownPosition(target);\n    setDropdownPosition(newPosition);\n  }, []);\n  useEffect(() => {\n    const handleScroll = () => {\n      // Assuming the toggle button for the dropdown has a ref or some identifier\n      const toggleButton = document.querySelector('.RampInputSelect--input');\n\n      if (toggleButton) {\n        updateDropdownPosition(toggleButton);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [updateDropdownPosition]);\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]); // Rest of your component...\n}\n\n_s(InputSelect, \"RwRgKDFmulxpl40c1asoYOQArR8=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: top + scrollY + 63,\n      // Adjusted to include scrollY\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["useCallback","useState","useEffect","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","updateDropdownPosition","target","newPosition","getDropdownPosition","handleScroll","toggleButton","document","querySelector","window","addEventListener","removeEventListener","selectedItem","Element","getBoundingClientRect","scrollY"],"sources":["/Users/ayushpant/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\nimport Downshift from \"downshift\";\nimport classNames from \"classnames\";\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\";\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null);\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({ top: 0, left: 0 });\n\n  const updateDropdownPosition = useCallback((target) => {\n    const newPosition = getDropdownPosition(target);\n    setDropdownPosition(newPosition);\n  }, []);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      // Assuming the toggle button for the dropdown has a ref or some identifier\n      const toggleButton = document.querySelector('.RampInputSelect--input');\n      if (toggleButton) {\n        updateDropdownPosition(toggleButton);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [updateDropdownPosition]);\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return;\n      }\n\n      consumerOnChange(selectedItem);\n      setSelectedValue(selectedItem);\n    },\n    [consumerOnChange]\n  );\n\n  // Rest of your component...\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left } = target.getBoundingClientRect();\n    const { scrollY } = window;\n    return {\n      top: top + scrollY + 63, // Adjusted to include scrollY\n      left,\n    };\n  }\n\n  return { top: 0, left: 0 };\n};\n"],"mappings":";;AAAA,SAAgBA,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,QAAwD,OAAxD;AAKA,OAAO,SAASC,WAAT,OAQqB;EAAA;;EAAA,IARO;IACjCC,KADiC;IAEjCC,YAFiC;IAGjCC,QAAQ,EAAEC,gBAHuB;IAIjCC,KAJiC;IAKjCC,SALiC;IAMjCC,SANiC;IAOjCC;EAPiC,CAQP;EAC1B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAeI,YAAf,aAAeA,YAAf,cAAeA,YAAf,GAA+B,IAA/B,CAAlD;EACA,MAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAmB;IAAEe,GAAG,EAAE,CAAP;IAAUC,IAAI,EAAE;EAAhB,CAAnB,CAAxD;EAEA,MAAMC,sBAAsB,GAAGlB,WAAW,CAAEmB,MAAD,IAAY;IACrD,MAAMC,WAAW,GAAGC,mBAAmB,CAACF,MAAD,CAAvC;IACAJ,mBAAmB,CAACK,WAAD,CAAnB;EACD,CAHyC,EAGvC,EAHuC,CAA1C;EAKAlB,SAAS,CAAC,MAAM;IACd,MAAMoB,YAAY,GAAG,MAAM;MACzB;MACA,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,yBAAvB,CAArB;;MACA,IAAIF,YAAJ,EAAkB;QAChBL,sBAAsB,CAACK,YAAD,CAAtB;MACD;IACF,CAND;;IAQAG,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCL,YAAlC;IAEA,OAAO,MAAM;MACXI,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCN,YAArC;IACD,CAFD;EAGD,CAdQ,EAcN,CAACJ,sBAAD,CAdM,CAAT;EAgBA,MAAMZ,QAAQ,GAAGN,WAAW,CACzB6B,YAAD,IAAkB;IAChB,IAAIA,YAAY,KAAK,IAArB,EAA2B;MACzB;IACD;;IAEDtB,gBAAgB,CAACsB,YAAD,CAAhB;IACAhB,gBAAgB,CAACgB,YAAD,CAAhB;EACD,CARyB,EAS1B,CAACtB,gBAAD,CAT0B,CAA5B,CAzB0B,CAqC1B;AACD;;GA9CeJ,W;;KAAAA,W;;AAgDhB,MAAMkB,mBAA0C,GAAIF,MAAD,IAAY;EAC7D,IAAIA,MAAM,YAAYW,OAAtB,EAA+B;IAC7B,MAAM;MAAEd,GAAF;MAAOC;IAAP,IAAgBE,MAAM,CAACY,qBAAP,EAAtB;IACA,MAAM;MAAEC;IAAF,IAAcN,MAApB;IACA,OAAO;MACLV,GAAG,EAAEA,GAAG,GAAGgB,OAAN,GAAgB,EADhB;MACoB;MACzBf;IAFK,CAAP;EAID;;EAED,OAAO;IAAED,GAAG,EAAE,CAAP;IAAUC,IAAI,EAAE;EAAhB,CAAP;AACD,CAXD"},"metadata":{},"sourceType":"module"}