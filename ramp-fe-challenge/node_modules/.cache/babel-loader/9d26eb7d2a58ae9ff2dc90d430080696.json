{"ast":null,"code":"var _jsxFileName = \"/Users/ayushpant/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState, useEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null); // Initialize the dropdown position state\n\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const inputRef = useRef(null); // useRef to access the input element\n  // Define a function to update the dropdown position based on the input element's current position\n\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      const position = getDropdownPosition(inputRef.current);\n      setDropdownPosition(position); // Update the state with the new position\n    }\n  }, []); // Attach scroll and resize event listeners to update the dropdown position dynamically\n\n  useEffect(() => {\n    updateDropdownPosition(); // Initial update for correct positioning\n\n    window.addEventListener('scroll', updateDropdownPosition, {\n      passive: true\n    });\n    window.addEventListener('resize', updateDropdownPosition, {\n      passive: true\n    });\n    return () => {\n      window.removeEventListener('scroll', updateDropdownPosition);\n      window.removeEventListener('resize', updateDropdownPosition);\n    };\n  }, [updateDropdownPosition]);\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n    updateDropdownPosition(); // Ensure the dropdown position is updated when the selection changes\n  }, [consumerOnChange, updateDropdownPosition]); // Ensure the getDropdownPosition function returns the correct positioning based on the element's bounding rectangle\n\n  const getDropdownPosition = element => {\n    const rect = element.getBoundingClientRect();\n    return {\n      top: rect.bottom + window.scrollY,\n      left: rect.left + window.scrollX\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: selectedItem => {\n      onChange(selectedItem);\n      updateDropdownPosition(); // Update position when the selection changes\n    },\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _ref2 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem ? parseItem(selectedItem) : null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        ref: inputRef,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            toggleProps.onClick(event);\n            updateDropdownPosition();\n          },\n          children: inputValue || (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.label)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            position: 'absolute',\n            top: '100%',\n            left: 0\n          } // Adjusted to always position below the input field\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSelect, \"rmMYar8SDugeETetQ1Sog5HQycQ=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = element => {\n  const rect = element.getBoundingClientRect();\n  return {\n    top: rect.bottom,\n    left: rect.left\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","useEffect","useRef","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","inputRef","updateDropdownPosition","current","position","getDropdownPosition","window","addEventListener","passive","removeEventListener","selectedItem","element","rect","getBoundingClientRect","bottom","scrollY","scrollX","item","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","event","onClick"],"sources":["/Users/ayushpant/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\";\nimport { useCallback, useState, useEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\";\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null);\n  // Initialize the dropdown position state\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({ top: 0, left: 0 });\n  const inputRef = useRef(null); // useRef to access the input element\n\n  // Define a function to update the dropdown position based on the input element's current position\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      const position = getDropdownPosition(inputRef.current);\n      setDropdownPosition(position); // Update the state with the new position\n    }\n  }, []);\n\n  // Attach scroll and resize event listeners to update the dropdown position dynamically\n  useEffect(() => {\n    updateDropdownPosition(); // Initial update for correct positioning\n    window.addEventListener('scroll', updateDropdownPosition, { passive: true });\n    window.addEventListener('resize', updateDropdownPosition, { passive: true });\n\n    return () => {\n      window.removeEventListener('scroll', updateDropdownPosition);\n      window.removeEventListener('resize', updateDropdownPosition);\n    };\n  }, [updateDropdownPosition]);\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return;\n      }\n\n      consumerOnChange(selectedItem);\n      setSelectedValue(selectedItem);\n      updateDropdownPosition(); // Ensure the dropdown position is updated when the selection changes\n    },\n    [consumerOnChange, updateDropdownPosition]\n  );\n\n  // Ensure the getDropdownPosition function returns the correct positioning based on the element's bounding rectangle\n  const getDropdownPosition: GetDropdownPositionFn = (element) => {\n    const rect = element.getBoundingClientRect();\n    return {\n      top: rect.bottom + window.scrollY,\n      left: rect.left + window.scrollX,\n    };\n  };\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={(selectedItem) => {\n        onChange(selectedItem);\n        updateDropdownPosition(); // Update position when the selection changes\n      }}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps();\n        const parsedSelectedItem = selectedItem ? parseItem(selectedItem) : null;\n\n        return (\n          <div className=\"RampInputSelect--root\" ref={inputRef}>\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              className=\"RampInputSelect--input\"\n              onClick={(event) => {\n                toggleProps.onClick(event);\n                updateDropdownPosition();\n              }}\n            >\n              {inputValue || parsedSelectedItem?.label}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\n              })}\n              {...getMenuProps()}\n              style={{ position: 'absolute', top: '100%', left: 0 }} // Adjusted to always position below the input field\n            >\n              {/* Render items */}\n            </div>\n          </div>\n        );\n      }}\n    </Downshift>\n  );\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (element) => {\n  const rect = element.getBoundingClientRect();\n  return {\n    top: rect.bottom,\n    left: rect.left,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}