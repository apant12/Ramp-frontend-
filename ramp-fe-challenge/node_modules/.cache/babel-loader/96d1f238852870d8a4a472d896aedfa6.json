{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    var _paginatedTransaction;\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || response.data === null) {\n        return previousResponse;\n      }\n\n      if (previousResponse === null) {\n        return response;\n      } // Assuming each transaction has a unique identifier. Adjust 't.id' to your actual identifier property.\n\n\n      const existingIds = new Set(previousResponse.data.map(t => t.id));\n      const filteredNewTransactions = response.data.filter(t => !existingIds.has(t.id));\n      return { ...response,\n        data: [...previousResponse.data, ...filteredNewTransactions],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []); // Determine if there are more transactions available based on the presence of nextPage\n\n  const hasMoreTransactions = !!(paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.nextPage);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    hasMoreTransactions\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","existingIds","Set","map","t","id","filteredNewTransactions","filter","has","invalidateData","hasMoreTransactions"],"sources":["/Users/ayushpant/Desktop/ramp2/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions?.nextPage ?? 0,\n      }\n    );\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || response.data === null) {\n        return previousResponse;\n      }\n\n      if (previousResponse === null) {\n        return response;\n      }\n\n      // Assuming each transaction has a unique identifier. Adjust 't.id' to your actual identifier property.\n      const existingIds = new Set(previousResponse.data.map(t => t.id));\n      const filteredNewTransactions = response.data.filter(t => !existingIds.has(t.id));\n\n      return {\n        ...response,\n        data: [...previousResponse.data, ...filteredNewTransactions],\n        nextPage: response.nextPage,\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n\n  // Determine if there are more transactions available based on the presence of nextPage\n  const hasMoreTransactions = !!paginatedTransactions?.nextPage;\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, hasMoreTransactions };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EAEA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IAAA;;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,2BAAEJ,qBAAF,aAAEA,qBAAF,uBAAEA,qBAAqB,CAAEK,QAAzB,yEAAqC;IAD3C,CAFmC,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACI,IAAT,KAAkB,IAA3C,EAAiD;QAC/C,OAAOD,gBAAP;MACD;;MAED,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOH,QAAP;MACD,CAP4C,CAS7C;;;MACA,MAAMK,WAAW,GAAG,IAAIC,GAAJ,CAAQH,gBAAgB,CAACC,IAAjB,CAAsBG,GAAtB,CAA0BC,CAAC,IAAIA,CAAC,CAACC,EAAjC,CAAR,CAApB;MACA,MAAMC,uBAAuB,GAAGV,QAAQ,CAACI,IAAT,CAAcO,MAAd,CAAqBH,CAAC,IAAI,CAACH,WAAW,CAACO,GAAZ,CAAgBJ,CAAC,CAACC,EAAlB,CAA3B,CAAhC;MAEA,OAAO,EACL,GAAGT,QADE;QAELI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGM,uBAA9B,CAFD;QAGLR,QAAQ,EAAEF,QAAQ,CAACE;MAHd,CAAP;IAKD,CAlBuB,CAAxB;EAmBD,CA3B2B,EA2BzB,CAACP,cAAD,EAAiBE,qBAAjB,CA3ByB,CAA5B;EA6BA,MAAMgB,cAAc,GAAGtB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC,CAjCsE,CAqCtE;;EACA,MAAMgB,mBAAmB,GAAG,CAAC,EAACjB,qBAAD,aAACA,qBAAD,eAACA,qBAAqB,CAAEK,QAAxB,CAA7B;EAEA,OAAO;IAAEE,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDc,cAAlD;IAAkEC;EAAlE,CAAP;AACD;;GAzCepB,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}