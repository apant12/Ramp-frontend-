{"ast":null,"code":"var _jsxFileName = \"/Users/ayushpant/Desktop/ramp2/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: employeesLoading,\n    ...employeeUtils\n  } = useEmployees();\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFilteredByEmployee, setIsFilteredByEmployee] = useState(false);\n  const [inputKey, setInputKey] = useState(0); // Key to force re-render of InputSelect\n\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setSelectedEmployeeId(employeeId); // Update the selected employee ID\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    const moreDataAvailable = typeof (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== 'undefined';\n    setHasMoreTransactions(moreDataAvailable);\n  }, [paginatedTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]); // Scroll event listener to force InputSelect re-render\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setInputKey(prevKey => prevKey + 1); // Change key to force re-render\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []); // Do something with selectedEmployeeId if needed\n\n  useEffect(() => {\n    console.log(\"Selected employee ID:\", selectedEmployeeId);\n  }, [selectedEmployeeId]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        // Use key to force re-render\n        isLoading: employeesLoading // Use the employeesLoading state here\n        ,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === \"\") {\n            setIsFilteredByEmployee(false);\n            setSelectedEmployeeId(null); // Reset the selected employee ID\n\n            await loadAllTransactions(); // Load all transactions\n          } else {\n            setIsFilteredByEmployee(true);\n            await loadTransactionsByEmployee(newValue.id); // Load transactions by selected employee\n          }\n        }\n      }, inputKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), !isFilteredByEmployee && (hasMoreTransactions || employees && employees.length > 0) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EJXMil/ddRA9q5gF+NMgF3/GQvs=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","employeesLoading","employeeUtils","hasMoreTransactions","setHasMoreTransactions","selectedEmployeeId","setSelectedEmployeeId","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isFilteredByEmployee","setIsFilteredByEmployee","inputKey","setInputKey","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","moreDataAvailable","nextPage","handleScroll","prevKey","window","addEventListener","removeEventListener","console","log","item","value","id","label","firstName","lastName","newValue","length"],"sources":["/Users/ayushpant/Desktop/ramp2/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { appendFile } from \"fs\";\nimport React, { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee, Transaction } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, loading: employeesLoading, ...employeeUtils } = useEmployees();\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null);\n\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFilteredByEmployee, setIsFilteredByEmployee] = useState(false);\n\n  const [inputKey, setInputKey] = useState(0); // Key to force re-render of InputSelect\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n      setSelectedEmployeeId(employeeId); // Update the selected employee ID\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    const moreDataAvailable = typeof paginatedTransactions?.nextPage !== 'undefined';\n    setHasMoreTransactions(moreDataAvailable);\n  }, [paginatedTransactions]);\n\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n\n  // Scroll event listener to force InputSelect re-render\n  useEffect(() => {\n    const handleScroll = () => {\n      setInputKey(prevKey => prevKey + 1); // Change key to force re-render\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Do something with selectedEmployeeId if needed\n  useEffect(() => {\n    console.log(\"Selected employee ID:\", selectedEmployeeId);\n  }, [selectedEmployeeId]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          key={inputKey} // Use key to force re-render\n          isLoading={employeesLoading} // Use the employeesLoading state here\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return;\n            }\n            if (newValue.id === \"\") {\n              setIsFilteredByEmployee(false);\n              setSelectedEmployeeId(null); // Reset the selected employee ID\n              await loadAllTransactions(); // Load all transactions\n            } else {\n              setIsFilteredByEmployee(true);\n              await loadTransactionsByEmployee(newValue.id); // Load transactions by selected employee\n            }\n          }}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n          {!isFilteredByEmployee && (hasMoreTransactions || (employees && employees.length > 0)) && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}